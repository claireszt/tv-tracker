name: 🚀 TV Tracker CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - staging
      - prod
  pull_request:
    branches:
      - dev
      - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tvtracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tvtracker_test
      NEXT_PUBLIC_TVDB_API_KEY: ${{ secrets.TVDB_API_KEY }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: ⚙️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 📦 Install Dependencies
        run: npm install

      - name: 🛠️ Generate Prisma Client
        run: npx prisma generate

      - name: 🗃️ Run Prisma Migrations
        run: npx prisma migrate deploy

      - name: 🧪 Run Tests
        run: npm run test

      - name: 🏗️ Build Project
        run: npm run build

  draft-release-notes:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 📝 Generate Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: draft-release-notes
    if: github.ref == 'refs/heads/prod'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🚀 Deploy to Production
        run: echo "🚀 Deploying TV Tracker to production..."

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [build-and-test, draft-release-notes, deploy]
    if: failure()

    steps:
      - name: 🚨 Create Issue on Failure
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "🚨 Pipeline Failure on ${{ github.ref_name }}"
          content-filepath: ./pipeline-failure-template.md
          labels: |
            🐛 bug
          token: ${{ secrets.GITHUB_TOKEN }}
